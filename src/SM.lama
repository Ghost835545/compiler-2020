-- Stack machine.

import List;
import World;
import State;
import Expr;
import Util;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ      -> sprintf ("READ")
  | WRITE     -> sprintf ("WRITE")
  | BINOP (s) -> sprintf ("BINOP %s", s)
  | LD    (x) -> sprintf ("LD %s", x)
  | ST    (x) -> sprintf ("ST %s", x)
  | CONST (n) -> sprintf ("CONST %d", n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval ([sk,st,w], ins) {
  case ins of
       CONST(c) : in -> eval([c: sk,st,w],in)
     | READ : in ->
     case 
       readWorld(w) of [v,nw] -> eval([v:sk,st,nw],in)
     esac
     | WRITE : in ->
     case 
      sk of head : t -> eval ([t, st, writeWorld(head,w)],in)
     esac
     | ST(x) : in ->
     case
      sk of head : t -> eval([t,st <- [x,head],w], in)
     esac
     | LD(x) : in -> eval([st(x):sk,st,w],in)
     | BINOP(b) : in ->
     case sk of 
      right : left : t -> eval([evalBinop(b,left,right): t,st,w], in)
     esac
     | {} -> [sk,st,w]
  esac

}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list (of, possibly, lists)
-- of stack machine instructions
fun compileExpr (expr, acc) {
  case expr of
      Const(x) -> CONST(x) : acc
    | Var(x) -> LD(x) : acc
    | Binop(b,left,right) -> BINOP(b) : compileExpr(right, compileExpr(left, acc))
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  fun compileSM(stmt, acc){
    case stmt of
         Skip -> acc
      |  Read(x) -> ST (x) : READ : acc
      |  Write(e) -> WRITE : compileExpr(e, acc)
      |  Assn(x,e) -> ST(x) : compileExpr(e, acc)
      |  Seq(s1,s2) -> compileSM(s2, compileSM(s1, acc))
    esac
 }
  reverse(compileSM(stmt, {}))
}

