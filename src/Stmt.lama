-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
fun eval ([s,w],stmt) {
   case stmt of
      Read(x) ->
        case
          readWorld(w) of [v,m] -> [s <- [x,v],m]
        esac
    | Write(v) -> [s,writeWorld(evalExpr(s,v),w)]
    | Assn(x,v) -> [s <- [x,evalExpr(s,v)],w]
    | Seq(s1,s2) -> eval(eval([s,w],s1),s2)
    | If(e, s1, s2) ->
        if evalExpr(s, e) != 0
        then eval([s, w], s1)
        else eval ([s,w], s2)
        fi
    | cycle@While(cond, body) ->
        if evalExpr(s, cond) != 0
        then eval(eval([s,w], body), cycle)
        else [s, w]
        fi
    | Repeat(body, cond) ->
        eval(eval([s,w], body), While(Binop("==", cond, Const(0)), body))
    | Skip -> [s,w]
    esac

}
-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}
