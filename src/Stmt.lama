-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
<<<<<<< HEAD
fun eval ([s,w],stmt) {
   case stmt of
      Read(x) ->
        case
          readWorld(w) of [v,m] -> [s <- [x,v],m]
        esac
    | Write(v) -> [s,writeWorld(evalExpr(s,v),w)]
    | Assn(x,v) -> [s <- [x,evalExpr(s,v)],w]
    | Seq(s1,s2) -> eval(eval([s,w],s1),s2)
    | Skip -> [s,w]
    esac
=======
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn   (string, expr)     |
--        Seq    (stmt, stmt)       |
--        Skip                      |
--        Read   (string)           |
--        Write  (expr)             |

fun eval (c, stmt) {
  failure ("Stmt eval not implemented\n")
}
>>>>>>> upstream/A03-straight-line-parser

}
-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}
